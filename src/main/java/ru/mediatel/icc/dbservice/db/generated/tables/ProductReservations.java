/*
 * This file is generated by jOOQ.
 */
package ru.mediatel.icc.dbservice.db.generated.tables;


import java.util.Collection;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.mediatel.icc.dbservice.db.generated.DefaultSchema;
import ru.mediatel.icc.dbservice.db.generated.tables.records.ProductReservationsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.24"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ProductReservations extends TableImpl<ProductReservationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>product_reservations</code>
     */
    public static final ProductReservations PRODUCT_RESERVATIONS = new ProductReservations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductReservationsRecord> getRecordType() {
        return ProductReservationsRecord.class;
    }

    /**
     * The column <code>product_reservations.product_id</code>.
     */
    public final TableField<ProductReservationsRecord, UUID> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>product_reservations.reserved_quantity</code>.
     */
    public final TableField<ProductReservationsRecord, Long> RESERVED_QUANTITY = createField(DSL.name("reserved_quantity"), SQLDataType.BIGINT, this, "");

    private ProductReservations(Name alias, Table<ProductReservationsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ProductReservations(Name alias, Table<ProductReservationsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "product_reservations" as  SELECT combined.product_id,
          sum(combined.quantity) AS reserved_quantity
         FROM ( SELECT pio.product_id,
                  pio.quantity
                 FROM (products_in_orders pio
                   JOIN orders o ON ((o.id = pio.order_id)))
                WHERE (o.status = ANY (ARRAY['ACTIVE'::order_status, 'PAID'::order_status]))
              UNION ALL
               SELECT pic.product_id,
                  pic.quantity
                 FROM (products_in_carts pic
                   JOIN carts c ON ((c.id = pic.cart_id)))
                WHERE ((c.status = 'CONFIRMED'::cart_status) AND (NOT (EXISTS ( SELECT 1
                         FROM orders o2
                        WHERE ((o2.cart_id = c.id) AND (o2.status = ANY (ARRAY['ACTIVE'::order_status, 'PAID'::order_status])))))))) combined
        GROUP BY combined.product_id;
        """), where);
    }

    /**
     * Create an aliased <code>product_reservations</code> table reference
     */
    public ProductReservations(String alias) {
        this(DSL.name(alias), PRODUCT_RESERVATIONS);
    }

    /**
     * Create an aliased <code>product_reservations</code> table reference
     */
    public ProductReservations(Name alias) {
        this(alias, PRODUCT_RESERVATIONS);
    }

    /**
     * Create a <code>product_reservations</code> table reference
     */
    public ProductReservations() {
        this(DSL.name("product_reservations"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public ProductReservations as(String alias) {
        return new ProductReservations(DSL.name(alias), this);
    }

    @Override
    public ProductReservations as(Name alias) {
        return new ProductReservations(alias, this);
    }

    @Override
    public ProductReservations as(Table<?> alias) {
        return new ProductReservations(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductReservations rename(String name) {
        return new ProductReservations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductReservations rename(Name name) {
        return new ProductReservations(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductReservations rename(Table<?> name) {
        return new ProductReservations(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductReservations where(Condition condition) {
        return new ProductReservations(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductReservations where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductReservations where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductReservations where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductReservations where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductReservations where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductReservations where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ProductReservations where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductReservations whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ProductReservations whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
