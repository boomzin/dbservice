/*
 * This file is generated by jOOQ.
 */
package ru.mediatel.icc.dbservice.db.generated.tables;


import java.util.Collection;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.mediatel.icc.dbservice.db.converters.ToolDefinitionConverter;
import ru.mediatel.icc.dbservice.db.generated.DefaultSchema;
import ru.mediatel.icc.dbservice.db.generated.Keys;
import ru.mediatel.icc.dbservice.db.generated.tables.records.ToolsRecord;
import ru.mediatel.icc.dbservice.model.tool.ToolDefinition;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.24"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Tools extends TableImpl<ToolsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tools</code>
     */
    public static final Tools TOOLS = new Tools();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ToolsRecord> getRecordType() {
        return ToolsRecord.class;
    }

    /**
     * The column <code>tools.id</code>.
     */
    public final TableField<ToolsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>tools.definition</code>.
     */
    public final TableField<ToolsRecord, ToolDefinition> DEFINITION = createField(DSL.name("definition"), SQLDataType.JSONB.nullable(false), this, "", new ToolDefinitionConverter());

    private Tools(Name alias, Table<ToolsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Tools(Name alias, Table<ToolsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>tools</code> table reference
     */
    public Tools(String alias) {
        this(DSL.name(alias), TOOLS);
    }

    /**
     * Create an aliased <code>tools</code> table reference
     */
    public Tools(Name alias) {
        this(alias, TOOLS);
    }

    /**
     * Create a <code>tools</code> table reference
     */
    public Tools() {
        this(DSL.name("tools"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ToolsRecord> getPrimaryKey() {
        return Keys.TOOLS_PKEY;
    }

    @Override
    public Tools as(String alias) {
        return new Tools(DSL.name(alias), this);
    }

    @Override
    public Tools as(Name alias) {
        return new Tools(alias, this);
    }

    @Override
    public Tools as(Table<?> alias) {
        return new Tools(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tools rename(String name) {
        return new Tools(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tools rename(Name name) {
        return new Tools(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tools rename(Table<?> name) {
        return new Tools(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tools where(Condition condition) {
        return new Tools(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tools where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tools where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tools where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tools where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tools where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tools where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tools where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tools whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tools whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
