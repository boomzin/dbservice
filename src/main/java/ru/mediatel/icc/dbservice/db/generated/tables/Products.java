/*
 * This file is generated by jOOQ.
 */
package ru.mediatel.icc.dbservice.db.generated.tables;


import java.math.BigDecimal;
import java.util.Collection;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.mediatel.icc.dbservice.db.generated.DefaultSchema;
import ru.mediatel.icc.dbservice.db.generated.Keys;
import ru.mediatel.icc.dbservice.db.generated.tables.Carts.CartsPath;
import ru.mediatel.icc.dbservice.db.generated.tables.Orders.OrdersPath;
import ru.mediatel.icc.dbservice.db.generated.tables.ProductsInCarts.ProductsInCartsPath;
import ru.mediatel.icc.dbservice.db.generated.tables.ProductsInOrders.ProductsInOrdersPath;
import ru.mediatel.icc.dbservice.db.generated.tables.records.ProductsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.24"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Products extends TableImpl<ProductsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>products</code>
     */
    public static final Products PRODUCTS = new Products();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductsRecord> getRecordType() {
        return ProductsRecord.class;
    }

    /**
     * The column <code>products.id</code>.
     */
    public final TableField<ProductsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>products.quantity</code>.
     */
    public final TableField<ProductsRecord, Integer> QUANTITY = createField(DSL.name("quantity"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>products.price</code>.
     */
    public final TableField<ProductsRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    /**
     * The column <code>products.description</code>.
     */
    public final TableField<ProductsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    private Products(Name alias, Table<ProductsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Products(Name alias, Table<ProductsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>products</code> table reference
     */
    public Products(String alias) {
        this(DSL.name(alias), PRODUCTS);
    }

    /**
     * Create an aliased <code>products</code> table reference
     */
    public Products(Name alias) {
        this(alias, PRODUCTS);
    }

    /**
     * Create a <code>products</code> table reference
     */
    public Products() {
        this(DSL.name("products"), null);
    }

    public <O extends Record> Products(Table<O> path, ForeignKey<O, ProductsRecord> childPath, InverseForeignKey<O, ProductsRecord> parentPath) {
        super(path, childPath, parentPath, PRODUCTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.19.24"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class ProductsPath extends Products implements Path<ProductsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ProductsPath(Table<O> path, ForeignKey<O, ProductsRecord> childPath, InverseForeignKey<O, ProductsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProductsPath(Name alias, Table<ProductsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProductsPath as(String alias) {
            return new ProductsPath(DSL.name(alias), this);
        }

        @Override
        public ProductsPath as(Name alias) {
            return new ProductsPath(alias, this);
        }

        @Override
        public ProductsPath as(Table<?> alias) {
            return new ProductsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ProductsRecord> getPrimaryKey() {
        return Keys.PRODUCTS_PKEY;
    }

    private transient ProductsInCartsPath _productsInCarts;

    /**
     * Get the implicit to-many join path to the <code>products_in_carts</code>
     * table
     */
    public ProductsInCartsPath productsInCarts() {
        if (_productsInCarts == null)
            _productsInCarts = new ProductsInCartsPath(this, null, Keys.PRODUCTS_IN_CARTS__PRODUCTS_IN_CARTS_PRODUCT_ID_FKEY.getInverseKey());

        return _productsInCarts;
    }

    private transient ProductsInOrdersPath _productsInOrders;

    /**
     * Get the implicit to-many join path to the <code>products_in_orders</code>
     * table
     */
    public ProductsInOrdersPath productsInOrders() {
        if (_productsInOrders == null)
            _productsInOrders = new ProductsInOrdersPath(this, null, Keys.PRODUCTS_IN_ORDERS__PRODUCTS_IN_ORDERS_PRODUCT_ID_FKEY.getInverseKey());

        return _productsInOrders;
    }

    /**
     * Get the implicit many-to-many join path to the <code>carts</code> table
     */
    public CartsPath carts() {
        return productsInCarts().carts();
    }

    /**
     * Get the implicit many-to-many join path to the <code>orders</code> table
     */
    public OrdersPath orders() {
        return productsInOrders().orders();
    }

    @Override
    public Products as(String alias) {
        return new Products(DSL.name(alias), this);
    }

    @Override
    public Products as(Name alias) {
        return new Products(alias, this);
    }

    @Override
    public Products as(Table<?> alias) {
        return new Products(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(String name) {
        return new Products(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(Name name) {
        return new Products(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Products rename(Table<?> name) {
        return new Products(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Products where(Condition condition) {
        return new Products(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Products where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Products where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Products where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Products where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Products where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Products where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Products where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Products whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Products whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
