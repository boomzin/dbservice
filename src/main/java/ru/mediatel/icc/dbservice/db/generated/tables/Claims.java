/*
 * This file is generated by jOOQ.
 */
package ru.mediatel.icc.dbservice.db.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.mediatel.icc.dbservice.db.generated.DefaultSchema;
import ru.mediatel.icc.dbservice.db.generated.Keys;
import ru.mediatel.icc.dbservice.db.generated.enums.ClaimStatus;
import ru.mediatel.icc.dbservice.db.generated.tables.Orders.OrdersPath;
import ru.mediatel.icc.dbservice.db.generated.tables.records.ClaimsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.24"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Claims extends TableImpl<ClaimsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>claims</code>
     */
    public static final Claims CLAIMS = new Claims();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClaimsRecord> getRecordType() {
        return ClaimsRecord.class;
    }

    /**
     * The column <code>claims.id</code>.
     */
    public final TableField<ClaimsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>claims.order_id</code>.
     */
    public final TableField<ClaimsRecord, UUID> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>claims.status</code>.
     */
    public final TableField<ClaimsRecord, ClaimStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(ClaimStatus.class), this, "");

    /**
     * The column <code>claims.created_at</code>.
     */
    public final TableField<ClaimsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>claims.updated_at</code>.
     */
    public final TableField<ClaimsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>claims.customer_comment</code>.
     */
    public final TableField<ClaimsRecord, String> CUSTOMER_COMMENT = createField(DSL.name("customer_comment"), SQLDataType.CLOB, this, "");

    private Claims(Name alias, Table<ClaimsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Claims(Name alias, Table<ClaimsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>claims</code> table reference
     */
    public Claims(String alias) {
        this(DSL.name(alias), CLAIMS);
    }

    /**
     * Create an aliased <code>claims</code> table reference
     */
    public Claims(Name alias) {
        this(alias, CLAIMS);
    }

    /**
     * Create a <code>claims</code> table reference
     */
    public Claims() {
        this(DSL.name("claims"), null);
    }

    public <O extends Record> Claims(Table<O> path, ForeignKey<O, ClaimsRecord> childPath, InverseForeignKey<O, ClaimsRecord> parentPath) {
        super(path, childPath, parentPath, CLAIMS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.19.24"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class ClaimsPath extends Claims implements Path<ClaimsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ClaimsPath(Table<O> path, ForeignKey<O, ClaimsRecord> childPath, InverseForeignKey<O, ClaimsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ClaimsPath(Name alias, Table<ClaimsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ClaimsPath as(String alias) {
            return new ClaimsPath(DSL.name(alias), this);
        }

        @Override
        public ClaimsPath as(Name alias) {
            return new ClaimsPath(alias, this);
        }

        @Override
        public ClaimsPath as(Table<?> alias) {
            return new ClaimsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ClaimsRecord> getPrimaryKey() {
        return Keys.CLAIMS_PKEY;
    }

    @Override
    public List<ForeignKey<ClaimsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CLAIMS__CLAIMS_ORDER_ID_FKEY);
    }

    private transient OrdersPath _orders;

    /**
     * Get the implicit join path to the <code>orders</code> table.
     */
    public OrdersPath orders() {
        if (_orders == null)
            _orders = new OrdersPath(this, Keys.CLAIMS__CLAIMS_ORDER_ID_FKEY, null);

        return _orders;
    }

    @Override
    public Claims as(String alias) {
        return new Claims(DSL.name(alias), this);
    }

    @Override
    public Claims as(Name alias) {
        return new Claims(alias, this);
    }

    @Override
    public Claims as(Table<?> alias) {
        return new Claims(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Claims rename(String name) {
        return new Claims(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Claims rename(Name name) {
        return new Claims(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Claims rename(Table<?> name) {
        return new Claims(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Claims where(Condition condition) {
        return new Claims(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Claims where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Claims where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Claims where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Claims where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Claims where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Claims where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Claims where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Claims whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Claims whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
