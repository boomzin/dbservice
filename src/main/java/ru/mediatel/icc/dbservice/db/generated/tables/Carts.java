/*
 * This file is generated by jOOQ.
 */
package ru.mediatel.icc.dbservice.db.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.mediatel.icc.dbservice.db.generated.DefaultSchema;
import ru.mediatel.icc.dbservice.db.generated.Keys;
import ru.mediatel.icc.dbservice.db.generated.enums.CartStatus;
import ru.mediatel.icc.dbservice.db.generated.tables.Interactions.InteractionsPath;
import ru.mediatel.icc.dbservice.db.generated.tables.Orders.OrdersPath;
import ru.mediatel.icc.dbservice.db.generated.tables.Products.ProductsPath;
import ru.mediatel.icc.dbservice.db.generated.tables.ProductsInCarts.ProductsInCartsPath;
import ru.mediatel.icc.dbservice.db.generated.tables.Users.UsersPath;
import ru.mediatel.icc.dbservice.db.generated.tables.records.CartsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.24"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Carts extends TableImpl<CartsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>carts</code>
     */
    public static final Carts CARTS = new Carts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CartsRecord> getRecordType() {
        return CartsRecord.class;
    }

    /**
     * The column <code>carts.id</code>.
     */
    public final TableField<CartsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>carts.user_id</code>.
     */
    public final TableField<CartsRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>carts.status</code>.
     */
    public final TableField<CartsRecord, CartStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(CartStatus.class), this, "");

    /**
     * The column <code>carts.created_at</code>.
     */
    public final TableField<CartsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>carts.updated_at</code>.
     */
    public final TableField<CartsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>carts.customer_comment</code>.
     */
    public final TableField<CartsRecord, String> CUSTOMER_COMMENT = createField(DSL.name("customer_comment"), SQLDataType.CLOB, this, "");

    private Carts(Name alias, Table<CartsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Carts(Name alias, Table<CartsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>carts</code> table reference
     */
    public Carts(String alias) {
        this(DSL.name(alias), CARTS);
    }

    /**
     * Create an aliased <code>carts</code> table reference
     */
    public Carts(Name alias) {
        this(alias, CARTS);
    }

    /**
     * Create a <code>carts</code> table reference
     */
    public Carts() {
        this(DSL.name("carts"), null);
    }

    public <O extends Record> Carts(Table<O> path, ForeignKey<O, CartsRecord> childPath, InverseForeignKey<O, CartsRecord> parentPath) {
        super(path, childPath, parentPath, CARTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.19.24"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class CartsPath extends Carts implements Path<CartsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CartsPath(Table<O> path, ForeignKey<O, CartsRecord> childPath, InverseForeignKey<O, CartsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CartsPath(Name alias, Table<CartsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CartsPath as(String alias) {
            return new CartsPath(DSL.name(alias), this);
        }

        @Override
        public CartsPath as(Name alias) {
            return new CartsPath(alias, this);
        }

        @Override
        public CartsPath as(Table<?> alias) {
            return new CartsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<CartsRecord> getPrimaryKey() {
        return Keys.CARTS_PKEY;
    }

    @Override
    public List<ForeignKey<CartsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CARTS__CARTS_USER_ID_FKEY);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.CARTS__CARTS_USER_ID_FKEY, null);

        return _users;
    }

    private transient InteractionsPath _interactions;

    /**
     * Get the implicit to-many join path to the <code>interactions</code> table
     */
    public InteractionsPath interactions() {
        if (_interactions == null)
            _interactions = new InteractionsPath(this, null, Keys.INTERACTIONS__INTERACTIONS_CART_ID_FKEY.getInverseKey());

        return _interactions;
    }

    private transient OrdersPath _orders;

    /**
     * Get the implicit to-many join path to the <code>orders</code> table
     */
    public OrdersPath orders() {
        if (_orders == null)
            _orders = new OrdersPath(this, null, Keys.ORDERS__ORDERS_CART_ID_FKEY.getInverseKey());

        return _orders;
    }

    private transient ProductsInCartsPath _productsInCarts;

    /**
     * Get the implicit to-many join path to the <code>products_in_carts</code>
     * table
     */
    public ProductsInCartsPath productsInCarts() {
        if (_productsInCarts == null)
            _productsInCarts = new ProductsInCartsPath(this, null, Keys.PRODUCTS_IN_CARTS__PRODUCTS_IN_CARTS_CART_ID_FKEY.getInverseKey());

        return _productsInCarts;
    }

    /**
     * Get the implicit many-to-many join path to the <code>products</code>
     * table
     */
    public ProductsPath products() {
        return productsInCarts().products();
    }

    @Override
    public Carts as(String alias) {
        return new Carts(DSL.name(alias), this);
    }

    @Override
    public Carts as(Name alias) {
        return new Carts(alias, this);
    }

    @Override
    public Carts as(Table<?> alias) {
        return new Carts(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Carts rename(String name) {
        return new Carts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Carts rename(Name name) {
        return new Carts(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Carts rename(Table<?> name) {
        return new Carts(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Carts where(Condition condition) {
        return new Carts(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Carts where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Carts where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Carts where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Carts where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Carts where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Carts where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Carts where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Carts whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Carts whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
